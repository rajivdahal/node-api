event driven communication and socket communication
///////////////////////////////////////////////////////////////////////////////
event based communication
///////////////////////////////////////////////////////////////////////////////
events=require('events')
var events=new events.EventEmitter()


setTimeout(function(){
    myevent.emit('kishor','hello')
},3000)

myevents.on('kishor',function(data){
    console.log("data in kishor event is",data)
})


myevents.on gives a response to the even that is emitted by

    myevent.emit('kishor','hello')


whenever you click that click is emitted likewise myevent.emit('kishor','hello') kishor event and send data hello
and 
myevent.on gives a response 
it takes response and data as argument

myevents.on('kishor',function(data){
    console.log("data in kishor event is",data)
})


///////////////////////////////////////////////////////////////////////////////
where to use event based communication?
///////////////////////////////////////////////////////////////////////////////

it can be used as a middleware to handle error

we can set error event and whenever error event is emitted , along with that error event send some data so taht events can 
communicate to each other


myev.on('err',function(err,resp){
    console.log("err from the event based system is",err)
    resp.json(err)
})
 upper is the event that acts as a response giver 
 not the event should be emitted


 inside auth controller 

router.get('/', function (req, res, next) {
   require('fs').readFile('skdfabsfkas',function(err,done){
       if(err){
           return req.myev.emit('err',err,res)
       }

   })
})

req has myev which is emmit from event 
so put an event in request before executing other middleware in app.js so that req has event and can have event communication

final code 

in app.js

app.use(function(req,res,next){
    req.myev=myev
    next()
})
myev.on('err',function(err,resp){
    console.log("err from the event based system is",err)
    resp.json(err)
})

in auth controller 


router.get('/', function (req, res, next) {
   require('fs').readFile('skdfabsfkas',function(err,done){
       if(err){
           return req.myev.emit('err',err,res)
       }

   })
})



////////////////////////////////////////////////////////////////////////////////
socket communication
////////////////////////////////////////////////////////////////////////////////

you need to have socket server 

like you initialized database server you need to initialize socket server at first

socket is bidirectional,event-based, real time communication
annd it needs to be initialized in both the client and server side. in our case client is react app and server is node app
but node app can also be used as both client and server

for client you install->socketio-client(react)
for server->socketio(node)

same like express server you need to have socket server now you need port no. and make the socket server

with seperation of concern make socket.js


const config=require('./configs/index')
const socket=require('socket.io')

module.exports=function(app){
    const io = socket(app.listen(config.SOCKET_PORT), {
        cors: {
            allow: '*'
        }
    })
    io.on('connection', function (client) {
        console.log('client connected to socket server', client.id);

        client.emit('hello', 'hi from server')

        client.on('hi', function (data) {
            console.log('at hi event', data)
        })
    })

}

now call this function from app.js
require('./sockets')(app)

it is called as function and app is passed in socket so that app.listen(express) is used to make a server

cors error might come ato solve this error cors:{
    allow:* for all the request handler
}

io.on ('connection',function(client){

})

//connection is also another event which is recognized by express server


but the connection is only established when the client is connected to the socket server

client.emit('hello',data)

it is the response given to the on when clients calls the event 'hello'

and as soon as hello event is triggered from client on function it sends the emmit response 
and again  it sends the signal to client by 'hi' event 
in react app the same method is ised emit and on
in this way communication is done






       
       






